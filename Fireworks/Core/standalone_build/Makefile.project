# -*-make-*-
#  Autors:   Dmytro Kovalskyi
#            Johannes Muelmenstaedt
# 
ifndef VERBOSE
  QUIET := @
endif

ifeq ($(shell uname), Linux)
	SO_EXT := so
else 
   ifeq ($(shell uname), Darwin)
	SO_EXT := dylib
   endif     
endif

include core.mk
include project.mk

# 
# common compiler flags
# COMPILERFLAGS := -Wall -O3 -m32 -fPIC
COMPILERFLAGS := -Wall -O0 -g -m32 -fPIC
# common includes
INCLUDE := -I./ -Isrc -I$(FWROOTSYS)/include -Icms $(addprefix -I,$(CoreIncludes)) $(addprefix -I,$(ProjectIncludes))
# compiler
CC := c++

CFLAGS := $(COMPILERFLAGS) $(INCLUDE)  $(EXTRACFLAGS)

# linker
LINKER = c++
# linker flags
ProjectMissingFlags = -lGeom -lGuiHtml
#ProjectLinkerFlags = -shared -m32 -Lexternal/lib -L$(FWROOTSYS)/lib $(addprefix -l,$(ProjectLibs)) $(ProjectMissingFlags)

ifeq ($(shell uname), Linux)
        MAKESHAREDLIB := -shared
        ExecLibs = -lRIO -lNet -L./ -l$(LibProject)
        ExtraProjectLibs = -L./ -l$(LibCore) 
else 
   ifeq ($(shell uname), Darwin)
      MAKESHAREDLIB := -dynamiclib
      ExecLibs = -lEve -lRint -lRGL -lCore -lGUI  -lNet -L./ -L/usr/X11R6/lib -l$(LibProject) -l$(LibCore) -lCore
      ExtraProjectLibs = -lEve -lGeom -lGeomPainter -lGraf3d \
		 -lGui -lGpad -lGraf -lHist -lPhysics -lGed -lEG -lTree \
		-lTreePlayer -lRGL -lFTGL -lNet  -lRint -lRGL -lGui -lCore \
		-lCintex -lCint -lReflex -lGenVector -lMathMore -lMathCore \
		-lboost_iostreams-xgcc40-mt-1_38 -lboost_program_options-xgcc40-mt-1_38 \
		-lboost_regex-xgcc40-mt-1_38 -lsigc-2.0.0 -L./ -L/usr/X11R6/lib -lGL -lGLU -Wl,-dylib_file,/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib:/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib -l$(LibCore)
   endif
endif

ProjectLinkerFlags = $(MAKESHAREDLIB) -m32 -Lexternal/lib -L$(FWROOTSYS)/lib $(addprefix -l,$(ProjectLibs)) $(ProjectMissingFlags)

# cmsShow source code and its object files
ProjectSourcesDirs = src plugins
ProjectSources = $(foreach dir,$(ProjectSourcesDirs),$(wildcard src/*/*/$(dir)/*.cc))
ProjectBuildFiles = $(wildcard src/*/*/BuildFile)
ProjectObjects = $(addprefix tmp/,$(ProjectSources:.cc=.o))

# cmsShow dictionaries
ProjectRootDicHeaders = $(wildcard src/*/*/src/*LinkDef.h)
ProjectRootDicSources = $(addprefix tmp/,$(ProjectRootDicHeaders:.h=.cc))
ProjectRootDicObjects = $(ProjectRootDicSources:.cc=.ro)

ProjectDictionaryIncludes = $(wildcard src/*/*/src/classes.h)
ProjectDictionaryXMLs     = $(ProjectDictionaryIncludes:.h=_def.xml)
ProjectDictionarySources  = $(addprefix tmp/,$(ProjectDictionaryIncludes:.h=.cpp))
ProjectDictionaryObjects  = $(ProjectDictionarySources:.cpp=.do)

LibCore = CMSDataFormats
LibProject = CMSShow

# Don't change this
LinkerOptions := -Wl,-rpath -Wl,

LDLIBRARYPATH := `pwd` `pwd`/external/lib $(FWROOTSYS)/lib

all: display

display: lib$(LibProject).$(SO_EXT) tmp/lib$(LibProject).$(SO_EXT).out cmsShow.exe

#cmsShow.exe: lib$(LibProject).$(SO_EXT) lib$(LibCore).$(SO_EXT) src/Fireworks/Core/bin/cmsShow.cc
#	$(QUIET) echo "linking cmsShow.exe"; \
#	$(CC) $(CFLAGS) -Wl,-rpath -Wl,./ -L$(FWROOTSYS)/lib $(addprefix $(LinkerOptions),$(LDLIBRARYPATH)) \
#	  -lGui -lGpad -lGraf -lRIO -lNet -o cmsShow.exe libCMSShow.$(SO_EXT) -L./ -l$(LibCore) -lCore src/Fireworks/Core/bin/cmsShow.cc
cmsShow.exe: lib$(LibProject).$(SO_EXT) lib$(LibCore).$(SO_EXT) src/Fireworks/Core/bin/cmsShow.cc
	$(QUIET) echo "linking cmsShow.exe"; \
	$(CC) $(CFLAGS) -Wl,-rpath -Wl,./ -L$(FWROOTSYS)/lib $(addprefix $(LinkerOptions),$(LDLIBRARYPATH)) \
	$(ExecLibs) -o cmsShow.exe src/Fireworks/Core/bin/cmsShow.cc


lib$(LibProject).$(SO_EXT): $(ProjectObjects) $(ProjectRootDicObjects) $(ProjectDictionaryObjects) lib$(LibCore).$(SO_EXT)
	$(QUIET) echo "linking core library $(LibProject)"; \
	$(LINKER) $(ProjectLinkerFlags) $(ExtraProjectLibs) \
	-o lib$(LibProject).$(SO_EXT) $(ProjectObjects) $(ProjectRootDicObjects) $(ProjectDictionaryObjects)

#debugMake: 
#	echo "$(ProjectSourcesDirs) $(ProjectSources)"
   
######################################################################################
# 
#                General rules for making object files
# 
######################################################################################

include common.mk

# # check dependencies
# tmp/%.d:  %.cc check_dependencies.pl
# 	$(QUIET) ./check_dependencies.pl $< $@ $(INCLUDE)
# 
# include $(addprefix tmp/,$(ProjectSources:.cc=.d))

.PRECIOUS: $(ProjectDictionarySources) $(ProjectRootDicSources)
