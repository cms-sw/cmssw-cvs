#! /bin/bash

function usage() {
cat << @EOF
hltConfigFromDB

  This is a simplified wrapper for the java ConfDB converter, which provides similar but
  more limited functionalities than edmConfigFromDB.
  The main difference howver is that while edmConfigFromDB relies on some server-side scripts
  to perform its duties, hltConfigFromDB runs locally, and as such is more easily updated 
  to use the latest version of the underlying tools.
  For this reason, it will check out and complie some java code from the EventFilter/ConfigDB
  package the first tie it is used.

Usage: 
  hltConfigFromDB --configName <name> [options]

        --format <format>           (output format, default='Ascii')
        --cff                       (retrieve configuration *fragment*)
        --input <f1.root[,f2.root]> (insert PoolSource with specified fileNames)
        --input <files.list>        (read a text file which lists input ROOT files)
        --output <out.root>         (insert PoolOutputModule w/ specified fileName)
        --nopsets                   (exclude all globale psets)
        --noedsources               (exclude all edsources)
        --noes                      (exclude all essources *and* esmodules)
        --noessources               (exclude all essources)
        --noesmodules               (exclude all esmodules)
        --noservices                (exclude all services)
        --nooutput                  (exclude all output modules)
        --nopaths                   (exclude all paths [+=referenced seqs&mods])
        --nosequences               (don't define sequences [+=referenced s&m])
        --nomodules                 (don't define modules)
        --psets <pset1[,pset2]>     (include only specified global psets)
        --psets <-pset1[,-pset2]>   (include all global psets but the specified)
        --essources <ess1[,ess2]>   (include only specified essources)
        --essources <-ess1[,-ess2]> (include all essources but the specified)
        --esmodules <esm1[,esm2]>   (include only specified esmodules)
        --esmodules <-esm1[,-esm2]> (include all esmodules but the specified)
        --services <svc1[,svc2]>    (include only specified services)
        --services <-svc1[,-svc2]>  (include all services but the specified)
        --paths <p1[,p2]>           (include only specified paths)
        --paths <-p1[,-p2]>         (include all paths but the specified)
        --sequences <s1[,s2]>       (include sequences, referenced or not!)
        --modules <p1[,p2]>         (include modules, referenced or not!)
        --blocks <m1::p1[,p2][,m2]> (generate parameter blocks
        --logfile <filename>        (specify alternative to default /dev/null)
@EOF
}

if [ ! "$CMSSW_BASE" ]; then
  echo "Please define the CMSSW environment running the 'cmsenv' command"
  exit 1
fi

if [[ ! "$*" =~ "--configName" ]]; then
  usage
  exit 1
fi

CONFDBDIR=$CMSSW_BASE/src/EventFilter/ConfigDB
CLASSPATH=$CONFDBDIR/ext/ojdbc14.jar:$CONFDBDIR/lib/cmssw-evf-confdb-gui.jar

[ -d $CONFDBDIR ]                              || addpkg EventFilter/ConfigDB HEAD 1>&2
[ -f $CONFDBDIR/lib/cmssw-evf-confdb-gui.jar ] || ant -f $CONFDBDIR/build.xml gui  1>&2

# FIXME - the pipe through sed removes the definition of streams and primary datasets from the dump - this should be done directly by the converter
java -cp $CLASSPATH confdb.converter.OfflineConverter -s 'convertme!' "$@" | grep -v '^TIMING' | sed -e'/^streams/,/^)/d' -e'/^datasets/,/^)/d'
