
- First, read the instructions posted at:
  https://twiki.cern.ch/twiki/bin/view/CMS/ElectronTagAndProbe

  and 
  https://twiki.cern.ch/twiki/bin/view/CMS/TagAndProbe

  If you are working in CMSSW_2_2_X or earlier, you will need to checkout 
  appropriate version of the package "PhysicsTools/TagAndProbe" 
  from CVS. From CMSSW_3_0_X, onwards the package comes in-built 
  with the official CMSSW release. However, please read the above 
  twiki page for any feature updates or bug-fix.  
  You should be able to compile and link the package in usual way.


- Then there are two steps to calculate efficiency using 
  tag-and-probe method. In the first step, you need to make EDM 
  TTree using your favorite "tag" and "probe" selections. In the 
  second step, you calculate efficiency (= number of passing probe /
  total number of probe) by either fitting for the Z--> e+e- 
  (or, mu+mu-) invariant mass peak, or by performing a background 
  subtraction, or by looking into the truth match.


  Below is a brief outline of the two steps for Z--> e+e-. The relevant
  configuration scripts have more detailed comments.

 Step I. 
 --------
 Make EDM TTree by modifying the example script  
      "test/Electron_EDM_Ntuple.cfg" 
 in the following way:

 1.) Define your own tag-probe pair by modifying the file
      "PhysicsTools/TagAndProbe/python/tag_probe_electron_cfi.py".
      I believe that for tag you always want to have GsfElectron passing
      id and trigger criteria.

     The four standard tag-probe pairs (SuperCluster --> GsfElectron, 
     GsfElectron  --> isolation, isolation  --> passing loose id,
     loose id  --> passing trigger) have have already been implemented 
     in the above file.



 2.) Modify the "PoolSource" module to run over the Z-->ee data sample.
     Also modify the "outpath" module to change the output file name.



 Step II. 
 --------

  Calculate efficiency as function of 'eta', 'p_T', 'phi', 'p',
  'px', 'py', or 'pz', 'E', 'Et', .... and many more. 
  You can choose two variables at a time.
  There is also support for two-dimensional efficiency binning.
  An example script (in fact, an implementation of the standard Egamma 
  efficiency sequence) can be found in the following file:

   "PhysicsTools/TagAndProbe/test/Electron_TagProbe_Analysis_cfg.py"


 1.) Modify the "PoolSource" module to run over your EDM TTree
     created in step I.

 2.) Set the boolean variables "CalculateEffSideBand",
     "CalculateEffFitter", and "CalculateEffTruth" to 'true' or
     'false' depending on which method(s) you want to use. You can
     set all three to 'true'.

 3.) If using "CalculateEffFitter" method (i.e., if you are fitting
     for signal and background events using a likelihood fit), you can
     set the boolean variable "UnbinnedFit" to 'true' if you want to 
     perform unbinned maximum likelihood fit. Otherwise, MINUIT will 
     do a binned maximum likelihood fit by default.

    [ Beware that the unbinned fit may take several hours or even a 
      full day depending on the binning of the dependent variables 
      and the size of the data sample. ]
 

 4.) Also modify the "FitFileName" to change the output ROOT file name.
     This file stores the histohrams for pass/fail events, the
     MINUIT fit plots, and "Efficiency vs. eta", "Efficiency vs. p_T", 
     ... etc. plots.


 








