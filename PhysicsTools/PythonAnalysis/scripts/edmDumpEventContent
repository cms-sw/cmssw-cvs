#!/usr/bin/env python 

import sys
import copy
import optparse
import re


class Branch(object):
    pass  


def branchType(branch):
    type = cmstools.ROOT.branchToClass(branch).GetName()
    if "edm::Wrapper" in type:
        type = type.replace("edm::Wrapper<","").rstrip(">")
    return type


def dumpBranches(filename):
    events = cmstools.EventTree (filename)
    listOfBranches = events._tree.GetListOfBranches()
    trailingDotRE = re.compile (r'\.$')
    branches = []
    regexList = []
    # are we asked to filter this list?
    for regexString in options.regex:
        #print "adding", regexString
        regexList.append( re.compile( regexString, re.IGNORECASE ) )
    for branch in listOfBranches:
        # print branch.GetName()
        tmpBranch = Branch()
        tmpBranch.fullname = branch.GetName()
        tmpBranch.name     = trailingDotRE.sub ('', tmpBranch.fullname)
        if "EventAux" in tmpBranch.fullname:
            continue
        #print "found", tmpBranch.name
        parts = tmpBranch.fullname.split("_")
        tmpBranch.module  = parts [1]
        tmpBranch.label   = parts [2]
        tmpBranch.process = parts [3]  
        tmpBranch.type    = branchType(branch)
        tmpBranch.cpp     = events.cppCode (tmpBranch.fullname)
        # are there any matches to the regexList?
        found = False
        for regex in regexList:
            # search the branch name
            if regex.search (tmpBranch.name):
                found = True
                break
            # search the type
            if regex.search (tmpBranch.cpp):
                found = True
                break
        # if there is a list and no matches
        if regexList and not found:
            continue
        branches.append( copy.copy(tmpBranch) )
    for branch in branches:
        #continue
        if options.name:
            print branch.name
        elif options.all:
            print '%-30s    %-20s    %-10s    %-15s : %s' % \
                  (branch.type,
                   '"' + branch.module  + '"',
                   '"' + branch.label   + '"',
                   '"' + branch.process + '"',
                   branch.name)
        else:
            print '%-30s    %-20s    %-10s    %-15s' % \
                  (branch.type,
                   '"' + branch.module  + '"',
                   '"' + branch.label   + '"',
                   '"' + branch.process + '"')



if __name__ == "__main__":

    parser = optparse.OptionParser \
             ("usage: %prog [options] templates.root" \
              "\nPrints out info on edm file.")
    parser.add_option ('--name', dest='name', action='store_true',
                       help='print out only branch names')
    parser.add_option ('--all',  dest='all',  action='store_true',
                       help='Print out everything: type, module, label, '\
                       'process, and branch name')
    parser.add_option ("--regex", dest='regex', action="append",
                       type="string", default=[],
                       help="Filter results based on regex")    
    options, args = parser.parse_args()
    if not args:
        print parser.print_usage()
        sys.exit()
    try:
        import PhysicsTools.PythonAnalysis as cmstools
        ## # to let ROOT understand we are in batch mode
        ## sys.argv.append( '-b-' ) 
        import ROOT
        ROOT.gROOT.SetBatch() # setting batch mode
        ROOT.gSystem.Load("libFWCoreFWLite.so")
        ROOT.AutoLibraryLoader.enable()
        filename = args[0]
        dumpBranches (filename)
    except:
        "Could not read %s" %filename

                                                    
