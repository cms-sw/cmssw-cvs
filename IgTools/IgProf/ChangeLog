2009-11-24  Giulio Eulisse <giulio.eulisse@cern.ch>

	* bin/IgResolveSymbols.h: fixes a 64bit problem.

2009-11-19  Giulio Eulisse <giulio.eulisse@cern.ch>

	* bin/IgProfAnalyse.cc: simplifies the way useGdb 
	  configuration option is handled by removing trivial
	  getter / setter.

	* bin/IgProfAnalyse.cc: add a proper filter to dump
	  heap map information. This also adds the top ten
	  stacktraces so that we can highlight them on the 
	  map.

	* bin/IgProfAnalyse.cc: simplify the tree walking
	  / filtering class removing the unneeded templation
	  and filter type hierarchy.

	* bin/IgProfAnalyse.cc: fixes a regression when
	  --dump-allocations option is not passed in.

	* bin/IgProfAnalyse.cc: simplify a few parts that
	  were using lat::StringOps without any particular
	  reason.

2009-11-14  Giulio Eulisse <giulio.eulisse@cern.ch>

	* bin/IgProfAnalyse.cc: fixes a regression introduced by 
	  wrong leak parsing. Notice that This will replaced soon
	  by rewritten code which does the dumping in a filter 
	  rather than while reading the profile.

2009-11-13  Giulio Eulisse <giulio.eulisse@cern.ch>

	* bin/IgProf.cc, plugins/IgProfModule.cc, plugins/IgProfService.cc
	  src/IgProfTrace.cc, test/test_instrumentation.cc: silencing
	  warnings which seem to be correct / conditionally supported
	  in future version of the standard and therefore currently 
	  there as gcc extension.

2009-11-11  Giulio Eulisse <giulio.eulisse@cern.ch>

	* bin/IgProfAnalyse.cc: do not close the allocation
	  dump file if no --dump-allocations options was 
	  passed.

2009-11-10  Giulio Eulisse <giulio.eulisse@cern.ch>

	* scripts/igprof-navigator: improved support for the
	  new naming schema, grouping PileUp and Global Tag 
	  information.

2009-11-09  Giulio Eulisse <giulio.eulisse@cern.ch>

	* bin/IgProfAnalyse.cc: initial implementation of
	  --dump-allocations <filename> option which 
	  dumps into a file called `filename' the list 
	  of all the live allocations found in the dump.
	  The format of the output file is:
	  <node-id>,<symbol-id>:<allocation-ptr>,<size>
	  where <node-id> is a unique identifier for 
	  the callpath, symbol-id is an identifier for
	  the method doing the allocation, while allocation
	  ptr and size are a description of the allocation.
	  Notice that for the moment <symbol-id> is
	  not very meaningful, this refers to the original
	  symbol found in the igprof output, not the 
	  one that gets calculated with the -g option. 

2009-11-04  Giulio Eulisse <giulio.eulisse@cern.ch>

	* bin/IgProfAnalyze.cc: when run in --sqlite mode, 
	  generate an insert-optimized set of SQL statements so that 
	  we scale up to create big (hundreds of megabytes)
	  database as well. This is required to handle the 
	  amount of data produced by the igprof-symbol-analysis
	  tool.

	* igprof-navigator: support for the new optimized 
	  schema.

2009-10-22  Giulio Eulisse <giulio.eulisse@cern.ch>

	* bin/IgProfAnalyze.cc (RemoveIgProfFilter): Revert 
	  to previous behavior i.e. just remove the IgProf/Hook part.
	  Introduced behavior could have resulted in massive parts of
	  genuine profile information dropped.

	* test/test_forking.cc: silence a gcc 4.3.2 warning complaining
	  about usefulness of calculating exp(1) and not doing
	  anything with the result.

2009-10-19  Giulio Eulisse <giulio.eulisse@cern.ch>

	* scripts/igprof-symbol-sizes: new script to extract symbol
	  size information for a given set of libraries which 
	  can then be processed using igprof-analyse.

2009-10-12  Lassi Tuura  <lat@iki.fi>
	
	* bin/IgProfAnalyze.cc (RemoveIgProfFilter): Remove the entire
	tree under IgProf/IgHook, not just the IgProf/Hook part.

	* src/IgProfSymCache.cc: Disable rounding to symbols.  When
	dynamic symbol information is inaccurate, e.g. for symbols with
	only local visibility, rounding to symbols on output reduce
	profile data accuracy: multiple unrelated symbols are collapsed
	together and igprof-analyse will no longer be able to separate
	them from each other.

2009-10-12  Giulio Eulisse <giulio.eulisse@cern.ch>
	
	* bin/IgProfAnalyse.cc: actually print out the correct number
	  for "Self" percentage. Clean up the way we print percentages.

	* bin/IgProfAnalyse.h: fixes a problem with the diff output when
	  -r option was not specified. The actual problem was that only
	  the counts for the baseline were added.

2009-10-12  Lassi A. Tuura  <lat@iki.fi>

	* src/IgProfTrace.cc: Silence some GCC 4.x printf() warnings.

	* src/IgProf.cc: Prevent profiling in the auxiliary thread which
	is used to dump profiles; it tends to go into busy loop on RHEL5.
	* src/IgProfPerf.cc: Do not prevent blocking profiling signals in
	threads which do not have a profiling timer running. Report the
	signal handler and profiling interval in the debug output.

2009-10-11  Lassi A. Tuura  <lat@iki.fi>

	* scripts/igprof-func: Eliminate all apostrophes, not just one.

2009-09-30  Giulio Eulisse <giulio.eulisse@cern.ch>

	* IgProfAnalyse.cc: print a syntax error if the igprof file is
	  malformed.

2009-09-29  Giulio Eulisse <giulio.eulisse@cern.ch>
	
	* igprof-navigator: better way of handling the differential outputs.

	* igprof-navigator: fixes python 2.4 incompatibility issue.   

2009-09-26  Lassi A. Tuura  <lat@iki.fi>

	* IgProfMem.cc, igprof: Add new option to report overhead in
	memory allocations: requested size vs. actually allocated size.

2009-08-19  Giulio Eulisse <giulio.eulisse@cern.ch>

	* igprof-navigator: enable merged and diff reports in non debug mode,
	  since they are stable enough (diff has still one non fatal problem
	  left).

	* igprof-navigator: more fixes for the diff output. Ignore empty
	  queries.

2009-08-13  Giulio Eulisse <giulio.eulisse@cern.ch>

	* igprof-navigator: Initial support for diff output.
	  * Read percentages from database, rather than calculate them on the fly.
	  * Supports negative percentages.

	* igprof-navigator: print out summary header only if possible.

	* igprof-navigator: Print out some debug information if internal variable 
	  "debug" is True.

	* IgProfAnalyse.cc: SQLITE output schema now contains percentage
	  information to avoid having to have the percentage logic in the 
	  web browing GUI.

	* IgProfAnalyse.cc: Helper method for printing out percentages added.
	 
2009-08-12  Giulio Eulisse <giulio.eulisse@cern.ch>

	* igprof-navigator: supports _merged and _diff25 suffix in debug
	  mode. Ignores them in non debug mode.

2009-08-07  Giulio Eulisse <giulio.eulisse@cern.ch>

	* ChangeLog: correct dates for the last two entries.

	* IgProfAnalyse.cc: gracefully exits if the wrong counter name is
	  passed by the user. Thanks to Andreas for reporting the bug.

	* igprof-navigator: support for IgProfMemLive and IgProfMemMax named
	  files added until some decision is actually made on the naming
	  convention. 

2009-08-06  Giulio Eulisse <giulio.eulisse@cern.ch>

	* igprof-navigator: fixes a bug where dates were not taken into 
	  account when splitting results in multiple tables. 

	* igprof-navigator: cosmetic fixes. 

2009-07-27  Giulio Eulisse <giulio.eulisse@cern.ch>

	* igprof-navigator: fixes a bug where dates were not taken into
	  account when splitting results in multiple tables.

	* 

	* igprof-navigator: link back to the index added to the summary page.

	* igprof-navigator: improved header for the summary.

	* igprof-navigator: correctly shows the percentage of total also
	  for the PERF_TICK reports.

	* igprof-navigator: various clean ups to the look and feel of the
	  main page.

	* igprof-navigator: Do not print verbose error messages when
	  quering the DB fails.
	
	* igprof-navigator: Do not show 0-sized files.

	* igprof-navigator: Improved style for the summary tables.
	
2009-07-26  Giulio Eulisse <giulio.eulisse@cern.ch>

	* igprof-navigator: New front page for the CGI version.

2009-07-22  Giulio Eulisse <giulio.eulisse@cern.ch>

	* IgProfAnalyse.cc, IgProfAnalyse.h: handles the case in which the
	  same counter is assigned  a different id either in
	  the same file (i.e. in the case we are performance profiling
	  a multithreaded program) or in multiple files.

	* igprof-regression-tests: helper script that runs 
	  a series of regression tests against files on the
	  IB server.

2009-07-17  Giulio Eulisse <giulio.eulisse@cern.ch>

	* igprof-navigator: fully working PERF_TICKS mode. Calls
	  column is hidden and cost is shown in seconds, rather
	  than in ticks.

2009-07-16  Giulio Eulisse <giulio.eulisse@cern.ch>
	
	* igprof-navigator: fixes a bug spot by Andreas which
	  was stripping "." "s" "q" "l" and "3" separately 
	  from the filename rather than ".sql3".

	* igprof-navigator: new web GUI for igprof-analyse sqlite
	  output. Only requires python and sqlite executable,
	  not py-sqlite.
	  Can work as standalone server or as a CGI script.
	  See documentation at the top of the script for more 
	  information.

2009-07-13  Giulio Eulisse <giulio.eulisse@cern.ch>
	
	* IgProfAnalyse.cc: more resilient option handling and
	  improved usage message.

2009-07-07  Giulio Eulisse <giulio.eulisse@cern.ch>

	* IgProfAnalyse.cc: tree like report format which shows
	  an ascii art top-down tree for the cumulative cost 
	  of a given counter.

2009-06-31  Giulio Eulisse <giulio.eulisse@cern.ch>
	
	* IgProfAnalyse.cc: new report format which shows the 
	  stacktrace for the top 10 offenders in a given profile.

2009-06-30  Giulio Eulisse <giulio.eulisse@cern.ch>

	* IgProfAnalyse.cc: rewrote mergeToNode seems to behave 
	  correctly now. 
	  Fixes more issues with the --diff-mode, in particular now
	  it works correcty also in the case some caller / callee is 
	  not there in the baseline.

2009-06-29  Giulio Eulisse <giulio.eulisse@cern.ch>

	* IgProfAnalyse.cc: diff mode now shows percentage difference
	  between baseline and input.
	  It is also smart enough to recognize that a given function is
	  not there in the baseline and reports it as "new".

2009-06-26  Giulio Eulisse <giulio.eulisse@cern.ch>

	* IgProfAnalyse.h, IgProfAnalyse.cc, IgResolveSymbols.h: fix more 
	  indentation / formatting issues.

	* IgProfAnalyse.cc: fixes another regression in building reports
	  which was introduce by revision 1.70.

2009-06-25  Giulio Eulisse <giulio.eulisse@cern.ch>
	
	* IgProfAnalyse.cc: fixes regression due to usage of abs 
	  with int64_t. Changed to use llabs.
	
	* IgProfAnalyse.cc: revert back to use only one decimal
	  for flat profile output percentages, it simplifies regression
	  testing.

	* IgProfAnalyse.h: fixes formatting of negative numbers.

	* IgProfAnalyse.cc: fixes formatting of progress counter if
	  a baseline is specified.

	* IgProfAnalyzer.cc: Fixes regression reported by Pete.
	  The problem was that the logic to determine which counter
	  to pick up by default if no counters are specified has to
	  be moved right after the baseline is read in, otherwise
	  things fails if no explicit `-r PERF_TICKS` is specified.

	* IgProfAnalyzer.cc: remove useless static variable.

	* IgProfAnalyse.cc, IgProfAnalyse.h: massive indentation and
	  formatting fixes to align to whatever is used in
	  igprof / IgHook.

2009-06-23  Giulio Eulisse <giulio.eulisse@cern.ch>

	* IgProfAnalyse.cc: new stacktrace filtering possibilities 
	  added. In particular possible to filter:

	    * counters that have more / less accumulated counts 
	      than what specified by --min-count-value / --max-count-value.
	    * counters that have more / less calls than what specified
	      by --min-calls-vales / --max-call-value.
	    * counters that have more / less average count size value than
	      what specified by --min-average-value / --max-average-value.

2009-06-18  Giulio Eulisse <giulio.eulisse@cern.ch>

	* IgProfAnalyse.cc, IgProfAnalyse.h: general clean up of source,
	  removing a few function local static objects used by some of 
	  the tree filters, in order to simplify multiple filter
	  passes. This is in preparation for the --baseline / --diff-mode 
	  options which require multiple passes over the same call tree
	  information.

	* IgProfAnalyse.cc, IgProfAnalyse.h: introduction of the i
	    
	      --baseline <filename>

	  option which allows to read two profiles and use one as
	  baseline for the other. This can be used as a rudimental
	  leak / performance regression detector. 
	  There is moreover a modifier option

	      --diff-mode

	  which allows to show differences between two unrelated runs.
	  Notice that --diff-mode option is mandatory when 
	  the baseline report has even just one single node which has 
	  more counts than the other.

2009-06-15  Lassi A. Tuura  <lat@iki.fi>

	* IgProf.cc (initialize): Start async thread only if dump file
	name is non-empty; typo previously always started the thread.
	(exitThread): Disable profile signal when thread is exiting so
	that the fork() inside popen() for gzip has a chance of finishing
	rather than getting caught into infinite loop on ERESTARTNOINTR.
	(dopthread_create): Do not wrap igprof internal threads.

2009-05-19  Lassi A. Tuura  <lat@iki.fi>

	* IgProfAtomic.h: Add x86-64 support.

	* IgProf.cc (initialise), IgProfPerf (enableTimer): Change the
	performance profiling sampling frequency from 10 to 5ms, it seems
	to still report correct total times; smaller intervals appear to
	result in skew, but I didn't research this closely.

	* IgProfAnalyze.h, IgProfAnalyze.cc: Clean-up type-unsafe code
	which trips up with various errors on 64-bit systems.

2008-03-10  Giulio Eulisse <giulio.eulisse@cern.ch>

	* IgProf.cc (dumpOneProfile): Handles the case a (non-root) 
	frame pointer has zero address.

2008-08-22  Lassi A. Tuura  <lat@iki.fi>

	* IgProfAtomic.h (IgProfAtomicInc, IgProfAtomicDec): Fix return
	value on increment operation.  This does not actually fix a bug
	since igprof only cares about zero/non-zero value (igtrace did
	care).  Update asm constraints to make sure sufficient barriers
	remain in place.

2008-03-12  Lassi A. Tuura  <lat@iki.fi>

	* IgProfMem.cc, IgProfPerf.cc: Truly remove obsolete headers.

2008-03-11  Lassi A. Tuura  <lat@iki.fi>

	* IgProfMem.cc (dofree): Release the memory resource first before
	invoking "free()".  Avoids the situation where the memory is freed
	to the heap and another thread manages to allocate it before the
	current thread manages to record it released.  A similar fix would
	be needed in dorealloc() but it isn't obvious how to apply the fix
	there because of the API definition; calls to realloc() are rare.

	* IgProf.cc: Stop using obsolete OptSymbolAddress.
	(enabled): Add some parentheses for readability.

	* IgProfTrace.cc (acquireResource): Dump more complete stack
	information when a resource conflict has been found.
	* IgProfTrace.h (OptSymbolAddress): Remove unused flag.

	* test/test_load.cc: Run 10 rounds to avoid excessive run time.

2008-03-10  Lassi A. Tuura  <lat@iki.fi>

	* IgProfFileDesc.h, IgProfMem.h, IgProfPerf.h: Remove as obsolete.
	* IgProfFileDesc.cc, IgProfMem.cc, IgProfPerf.cc: Adjust to
	removed headers, those above and IgProfPool.h.

2008-03-06  Lassi A. Tuura  <lat@iki.fi>

	* BuildFile: Remove optimisation kill override.

	* IgProfPerf.cc: Fix SIG_SETMASK logic; this sets the signal mask,
	not the signals allowed, so force the profiling signal out of the
	mask rather than forcing it in.  Improve debug output when signal
	handling overrides take place.

	* IgProf.cc (enabled, enable, disable): Make it more obvious that
	the profiling engine is disabled when thread-local flag is
	modified, but does not yet exist (while the thread is created).

2008-03-06  Lassi A. Tuura  <lat@iki.fi>

	* IgProf.cc (enable, disable): Protect against activity for
	thread-local actions before the thread has been fully initialised.
	* IgProfTrace.h (freestart_, freeend_): Remove unused fields.
	* IgProfTrace.cc (mergeFrom): Fix various data traversal bugs.
	(debugDumpStack): Print more details about which value is which.
	(debugDump): Do print out the stack dump.

2008-03-06  Lassi A. Tuura  <lat@iki.fi>

	* Re-implement the handling of internal profiling buffers to
	reduce memory consumption for memory-heavy applications.
	Not entirely functional yet.
	* IgProfBuffer.h, IgProfBuffer.cc: New buffer core.
	* IgProfSymCache.h, IgProfSymCache.cc: Separate symbol caches.
	* IgProfTrace.h, IgProfTrace.cc: Simplify, just grow the buffer
	piece-meal as more data is added.  Remove ability to relocate the
	buffer and to do symbol mappings; we do the latter at the end.
	* IgProfMem.cc, IgProfFileDesc.cc, IgProfPerf.cc: Adjust.
	* IgProf.h, IgProf.cc: Adjust.  Provide separate global and
	per-thread enabled/disabled states.
	* IgProfPool.h, IgProfPool.cc: Removed.

2007-11-27  Lassi A. Tuura  <lat@iki.fi>

	* igprof-analyse: Resolve pure file names against $PATH.  This
	usually just the binary names, and it is better to attempt the
	path search than not to find the file at all for symbol check.

	* IgProfPerf.cc: Hook 'sigaction' and prevent profiler signal from
	being overridden.  Improve the logic and add a warning if there is
	an attempt to block the profiler signal.

2007-11-27  Lassi A. Tuura  <lat@iki.fi>

	* IgProf.cc: Use "s_activated", not "s_initialized" to protect
	against use of the profiler when it is unsafe to do so.  Avoids
	crash risk at exit time if the application abandons threads.

2007-11-21  Peter Elmer <Peter.Elmer@cern.ch> 

        * Updates to build with CMSSW.  Following the old patch for this,
	  but updating "Ig_Tools" to "IgTools".
        * Add .admin/developers files.

2007-11-14  Peter Elmer <Peter.Elmer@cern.ch>

        * Modify includes and BuildFiles to refer to "IgTools" rather than
	"Ig_Tools".

2007-11-13  Peter Elmer <Peter.Elmer@cern.ch>

        * Migrate Ig_Tools/{IgHook,IgTrace,IgProf} into the CMSSW CVS
	repository from the IGNOMINY repo, changing the subsystem name to
	"IgTools" to conform to the CMSSW conventions. The initial import
	is tagged "pe20071114-CMSSW-import" and the revision history prior
	to that should be maintained.

2007-06-06  Lassi A. Tuura  <lat@iki.fi>

	* igprof-func, igprof-segment: New utility scripts.

2007-06-06  Lassi A. Tuura  <lat@iki.fi>

	Add back support for peak counter value reporting.

	* igprof-analyse: Add --value option to select analysis of normal
	counter value vs. peak value.

	* IgProfTrace.cc (<buffer-size-parameters>): Define unsigned.
	(push): Allow combined ACQUIRE | RELEASE records, for "merge".
	(merge): Add a partial fix to handling peak counter value.  For
	now add an artificial ACQUIRE | RELEASE resource record to bump up
	the peak counter value.  This is not entirely correct in that it
	occurs after resources are released so the peak counter may not be
	adjusted sufficiently high between buffers; but it is better than
	what was there, live with the inaccuracy for now.

	* IgProf.cc (dumpProfile): Dump counters that have peak value set
	even if ticks is zero.  Fixes bug in reporting MEM_LIVE peak.

2007-06-01  Lassi A. Tuura  <lat@iki.fi>

	* igprof-analyse: If "abs_path" does not resolve the path name,
	for example if the path does not exist, just use the original.

2007-04-21  Lassi A. Tuura  <lat@iki.fi>

	* igprof-analyse: Send verbose output to stderr, not stdout.
	Update HTML output.  Convert library names to "true name" by
	translating symlinks to actual paths.  Align the text output
	correctly when counts are wider than value.

2007-03-31  Lassi A. Tuura  <lat@iki.fi>

	* src/IgProfTrace.h: Increase max stack depth to 400.

	* igprof-analyse: Implement a more accurate resolution of symbols.

2007-03-27  Lassi A. Tuura  <lat@iki.fi>

	* IgProfTrace.h, IgProfTrace.cc: New, a relocatable data gathering
	buffer explicitly optimised for collecting profile data.

	* IgProf.h, IgProf.cc: Adjust to using IgProfTrace.  Report
	individual resource leaks.  Fix the communication in an unclean
	exit, the profiler no longer hangs when ROOT calls "exit()" from
	signal handlers, threads are not closed and destructors run.

	* IgProfPool.h, IgProfPool.cc, IgProfFileDesc.cc, IgProfMem.cc,
	IgProfPerf.cc: Adjust to using IgProfTrace.

	* IgProfPool.h, IgProfPool.cc, IgProfFileDesc.cc, IgProfMem.cc,
	IgProfPerf.cc: Adjust to using IgProfTrace.

	* igprof-analyse (readDump): Read the new leak and peak reports.

	* IgProfMacros.h: Make IGPROF_ASSERT conditional on IGPROF_DEBUG.
	* BuildFile: Define IGPROF_DEBUG to zero by default.

2007-03-13  Lassi A. Tuura  <lat@iki.fi>

	* igprof-analyse (igprof_filter_by_lib_pre): Fix typo.
	(readDump): Use '@{lib+off}' instead of '@(lib+off)' to help
	kcachegrind parse the final output more sensibly.

2007-02-22  Lassi A. Tuura  <lat@iki.fi>

	* IgProfPerf.cc: Set SA_SIGINFO when setting up the signal.

2007-02-16  Lassi A. Tuura  <lat@iki.fi>

	* igprof-analyse: Add option to convert data to callgrind format.

2007-02-15  Lassi A. Tuura  <lat@iki.fi>

	* igprof-analyse (merge_to_node): Merge to parent's structure from
	the source node, not from the parent itself (duh!).

	* IgProf.cc (initialize): Increment the right pointer in handling
	the dump flag option.

	* IgProf.cc (initialize): Move all options parsing here including
	output file name.  Add new option to specify a file whose
	existence triggers an intermediate profile dump.
	(profileReadHunk): Don't shadow "fd" variable name.
	(profileListenThread): Dump if profile dump trigger file exists.
	(dump): Remove parsing of profile options, now in initialisation.
	Disable leak map output, it's currently just waste of space.

	* IgProfPerf.cc (profileSignalHandler): Drop one less frame from
	the bottom of the stack.  Not sure if this was changed with the
	IgHookTrace::stacktrace() improvements, but definitely now better.
	(enableSignalHandler): Use sigaction(SA_RESTART), not signal().

	* IgProfPool.cc: Initialise two mappings in constructor so we
	initially have a buffer to swap to when the first buffer fills up.
	Rationale is to avoid anything even potentially fragile.

	* igprof: Add support for option "-z" for simpler output file
	compression and "-D" option to specify a flag file to trigger
	an intermediate profile output dump.

2007-02-12  Lassi A. Tuura  <lat@iki.fi>

	* test/test_load.cc: Try to push the system harder with deeper
	stacks and more aggressive allocation rate.  Still no match to
	Geant4 however, have not been able to overflow the profile pools
	with this test.

	* igprof: Accept new option -T to set temporary directory for
	intermediate data files.  In extreme cases several gigabytes may
	need to be allocated  and it's not appropriate to fill /tmp.

	* IgProf.cc (pool): Do not check thread id when no threads used.
	(profileReadHunk): Reset "node" when returning from nested pool.
	(debug): Print current time after process id.
	(dump): No more need to print out how long the dump took.
	
	* IgProfFileDesc.cc, IgProfMem.cc, IgProfPerf.cc
	(add, profileSignalHandler): Allow deeper stacks, ROOT seems to
	indulge some very deep ones.  Mark the functions calling stack
	trace as no-inline to avoid surprise changes in number of stack
	frames to drop.

	* IgProfPool.cc (initFile): Create files in $IGPROF_TMPDIR if set.
	(push): Fix a bug in writing out the entry descriptor when stack
	depth is negative.  We protected everywhere else, but then claimed
	excessively large entry, confusing reading side.

2007-02-10  Lassi A. Tuura  <lat@iki.fi>

	* IgProfPool.h, IgProfPool.cc: Handle better situations where the
	pool fills up faster than the collector can empty it, to avoid
	burning large amounts of /tmp space.  Yield the CPU every few
	allocations, not just when the buffer is full, and in case that
	doesn't help, for example on a SMP system with free CPU capacity,
	force the thread off CPU by sleeping a bit every now and then.

	* IgProf.h, IgProf.cc, IgProfMem.cc, IgProfPerf.h, IgProfPerf.cc,
	IgProfFileDesc.cc: Simplify profiler module implementation and fix
	various minor issues in profiler initialisation and exit handling.
	Improve debugging output and diagnostics.  Always capture threads
	in the main profiler module instead of the performance profiler,
	then notify profiling modules about the threads.  Use basic atomic
	instructions instead of mutexes for profiler re-entry guards.  Use
	intermediate pools for collecting profile data for better memory
	profiling performance and to restore use of tosymbol() to reduce
	profile output.  Process intermediate profile data in parallel if
	threads are available.  Make sure externally visible names from
	the profiler include IgProf.  Record deleted entities in leak
	checking mode even if the profiler is inactive in order not to
	flag leaks incorrectly.  Use 10ms timer for performance profiling,
	asking for less makes reporting inaccurate: the signal may be
	delivered every 10ms even if setitimer() claims better resolution.

	* IgProfPool.h, IgProfPool.cc: New, implement a high-performance
	profile data gathering pool.  Used as an intermediate pool between
	the profilers and the collector sides in order to avoid all dead
	locks, reduce memory usage and improve performance.

	* IgProfAtomic.h: New, implement a light-weight locking mechanism
	to manage profiler re-entrancy.  The reason for abandoning pthread
	locks for this is that they are not re-entrant themselves and so
	cannot be re-entered in signal handlers, and may allocate memory
	when contended and so cannot be re-entered in memory profiler.

	* igprof-analyse: Convert unidentified (@?0xADDRESS) symbols to
	file+offset pseudo-label when reading in the dumps.  This makes
	more sense to users and allows us to identify identical functions
	when reading in several dumps at once.

2007-02-08  Lassi A. Tuura  <root@maccms02.cern.ch>

	* igprof-analyse (igprof_filter_malloc_post): Add another array
	"new" operator to the list of malloc-like functions to suppress.

2007-02-07  Lassi A. Tuura  <root@maccms02.cern.ch>

	* IgProfPerf.cc (profileSignalHandler): Correct comment on why we
	remove two levels from the bottom of the stack trace.

	* IgProf.cc (initialize): If process wasn't selected for
	profiling, print the names that were used in matching.  If the
	process was selected for profiling, print out the program name.
	Initialise profile root early in order not to initialise it at a
	time we really shouldn't.  Use %f not %lf to format floats.
	(debug): Print the process id.
	(dump): Print process name on all platforms.  Use %f, not %lf.

	* igprof: Set variables correctly for working on OS X.  The
	library path is a hack however as there's no scram.

2007-02-01  Lassi A. Tuura  <lat@iki.fi>

	* IgProf.cc: Don't dump if the profiler wasn't activated.

	* igprof: Add -t/--target option to help set profiling target.

2007-01-31  Lassi A. Tuura  <lat@iki.fi>

	* IgProf.cc, igprof-analyse: Start the call depth counting from 1,
	now that we are dropping the unnecessary "fake" top frame.  In
	analysing read the program prefix separately outside the loop.

	* IgProf.cc: Produce new style, much more compact, dump.  Include
	the performance counter tick resolution to the output.  In debug
	mode print out how long it took us to generate the dump.

	* IgProfFileDesc.cc: Preserve errno across calls.

	* IgProfMem.cc (add): Remove tosymbol() calls, there are too many
	cases where the calls bomb out or dead-lock on SL4, even without
	performance profiler; the dynamic linker for example invokes
	malloc in context when it's not possible to invoke dladdr().

	* IgProfPerf.cc: Add per-thread stack look up cache.  Merge "add"
	into the profile signal handler.  Request 5ms profiling interval.
	Invoke stacktrace() at least once in each thread before starting
	the timer; SL4 seems to play with pthreads inside backtrace(),
	although with the new tracer in IgHookTrace this is moot for IA32.

	* igprof-analyse: Analyse new style dump.

2007-01-29  Lassi A. Tuura  <lat@iki.fi>

	* igprof-analyse: Merge profile data from all command line
	arguments instead of analysing each one separately.

2007-01-27  Lassi A. Tuura  <lat@iki.fi>

	* IgProfPerf.cc (add): Improve the number of stack frames dropped.
	(profileSignalHandler): Update documentation and simplify.
	(threadWrapper, dopthread_create): Hide from concurrently running
	other profiler modules.

	* IgProfMem.cc: Improve the number of stack frames dropped.

	* IgProf.cc (doexit): Always merge the per-thread profile tree
	in multi-threaded applications, even the main thread has one.

	* igprof-analyse: Replace fixed symbol name filters with custom
	filter routines and define standard filters 'igprof', 'malloc',
	'gcc_pool_alloc', 'no_std' and 'by_lib'; also allow user-defined
	filters.  Correct the reporting of self/children lines in the call
	graph for max-valued counters.  Correctly unify symbols with
	several addresses to one when reading in the dumps; the earlier
	version did the merge correctly within one level, but not across
	the entire call tree.  Add documentation and shuffle the code
	around into a bit more logical reading order.

2007-01-26  Lassi A. Tuura  <lat@iki.fi>

	* IgProf.cc: Hook into exit() functions after all, otherwise we
	fail to capture statistics from non-main threads that call exit().
	If that happens, just merge the thread result to the main tree.

	* IgProfMem.cc: Look up symbols after all, using a hash table to
	track previously looked up addresses so we don't call dladdr()
	unnecessarily frequently.  The table doesn't use much memory.
	This is what Giulio used to do in the old days.

	* IgProfPerf.cc: Do not look up symbol addresses, pass call
	addresses through as they are and let the analyser worry about
	them.  The reason is that every dladdr() takes a mutex lock inside
	the dynamic linker, causing a deadlock if the same thread is
	already inside the dynamic linker when the profiling signal hits.

2007-01-26  Lassi A. Tuura  <lat@iki.fi>

	* cmssw-igprof-patch: Add script to patch IgHook and IgProf for
	building and using them inside a CMSSW area.  Effectively just
	changes the library name to include Ig_Tools.

	* igprof: Add "-o" option to specify output destination.  If debug
	mode is enabled, turn on IgHook debugging as well.  Correct how
	parameters for all profiler modules are set.  If $LD_PRELOAD is
	already set, add to it rather than override it; this allows igprof
	to coexist with other tools like catchsegv and valgrind.

	* IgProf.h, IgProf.cc, IgProfFileDesc.cc, IgProfMem.cc: Add
	support for $IGPROF_TARGET environment variable to select
	processes to profile; if the process is not selected, force all
	profile modules off.  Add support for an output option in profiler
	options, and if the output file starts with '|', send the output
	via a pipe; this allows the output file to be renamed and for
	example to be compressed.  If debugging mode is on, log the
	profiling options used.  Dump the profile output via a global
	destructor, and remove the exit hooks; this allows global
	destructors to be included in the results (allocate live map
	tables and profiler chains on the heap so they remain valid).

	* IgProfMem.cc: Rename MEM_LIVE_MAX counter to MEM_LIVE_PEAK; it's
	not a "MAX" counter in the sense the analysis code understands it.
	Improve performance by keeping a cache of recent call address to
	counter node mappings, and by not mapping the addresses to symbols
	(leaving that to analysis); the profiler overhead is now small.
	Always maintain the live heap object map.

	* IgProfPerf.cc: Hook 'pthread_sigmask' with default symbol look
	up in order not to load libpthread.so into non-threaded programs.
	Remove the Linux "profiling thread", it is now unnecessary.  Check
	signal mask pointer is valid in pthread_sigmask override.

	* igprof-analyse: Add options to show number of calls and call
	paths; by default do not show these columns.  Output first flat
	by-cumulative and by-self profiles, then always by-cumulative call
	tree.  Improve column formatting so values are easier to read and
	match.  Format large numbers more readably.  Suppress rows with
	zero entries from the profile output; these can arise when the
	selected counter has no data while others do.  If no counter was
	selected for reporting and the dump includes several, require a
	counter to be selected -- don't default to any counter.  Optimise
	how the data is kept in memory.  Read in only the counters we are
	going to analyse and keep all count and frequency values in an
	array indexed by an index id given to each node.  Support merging
	tree nodes when they refer to the same symbol, the memory profiler
	now produces trees by actual call address.  Change tree walks to
	pass parent reference as that simplifies tree action
	implementation.  Speed up the tree walks by use separate action
	functions based on whether we are maximising or accumulating the
	counters.  Optimise call tree map sort by using call tree depth to
	decide whether one function could call the other and should come
	first, as that uses little additional memory and is very quick.
	Remap symbol names with a single invocation of gdb and c++filt;
	this speeds up the process very significantly.  (HTML and XML
	output are now broken.)

2007-01-24  Lassi A. Tuura  <lat@iki.fi>

	* test/test_load.cc: Use deeper and more varied stacks.

2007-01-23  Lassi A. Tuura  <lat@iki.fi>

	* igprof-analyse: Report and sort only one counter at a time, in
	order to keep the functionality simple enough to document and
	implement.  Add a '--verbose' option to get processing details.
	Don't fold recursive calls into the report entry; add a "'#"
	suffix to nested calls to keep them separate.  Unravel the
	recursive analysis calls into a single stack-based 'walk' function
	with pre- and post-traversal action functions; this avoids
	warnings from perl on too deep recursion and makes the code easier
	to manage.  Maintain a separate who-call-who matrix in order to
	speed up function sorting; this makes a dramatic difference with
	very large call trees.

	* test/test_forking.cc: Join the sub-thread, otherwise we
	lose the stats for it.

	* IgProfFileDesc.cc, IgProfMem.cc (add): Capture deeper stack
	frames, 256 frames instead of 128.

	* IgProfPerf.cc: Capture pthread_sigmask and prevent profiling
	signals from being swallowed or blocked.  Capture deeper stack
	frames, 256 frames instead of 128.  Adjust number of frames to
	drop off from profiling signals, it seems the layouts changed.
	Explicitly call "exitThread" when returning from the captured
	thread, it seems the thread library no longer calls on exit.

2004-06-21  Shahzad Muzaffar <Shahzad.Muzaffar@cern.ch>

	* BuildFile: updated for new SCRAM V1.

2004-06-15  Lassi A. Tuura  <lat@iki.fi>

	* scripts/igprof-analyse: Don't make GDB resolution the default.
	Only do GDB resolution if the library name is non-null.  Improve
	recognition of GDB output.  Fix input file parsing.

	* IgProf.cc (panic, dumpSymbols): Also print out library offset.
	* scripts/igprof-analyse: Handle new library offset for symbols.
	Optionally remap symbols with gdb to real (possibly private)
	symbols.

2004-06-07  Giulio Eulisse  <giulio.eulisse@cern.ch>

	* IgProfPerf.cc (add): Drop profileSignalHandlerFrame ().

2004-06-05  Lassi A. Tuura  <lat@iki.fi>

	* IgProfPerf.cc (add): Increase and document the number of stack
	frames to drop.  Need to drop off signal delivery stack frames.

2004-06-04  Lassi A. Tuura  <lat@iki.fi>

	* igprof: Only support profiling.  Clean up option handling and
	document all available options; remove option shortcuts.  Support
	performance profiler options to select timer.

	* IgProfPerf.cc: Support real, user and process time profiling.
	Select the timer and signal to use based on this choice.

	* IgProfMem.cc: Make "live" memory track both final live memory
	(= leaked memory) and maximum live memory in each call context.

2004-05-16  Lassi A. Tuura  <lat@iki.fi>

	* igprof-analyse: Optionally demangle symbols.  Sanitise symbol
	and library names in HTML output.  Make sure all counters are
	always correctly tracked, including unknown counters specified on
	the command line.

2004-05-15  Lassi A. Tuura  <lat@iki.fi>

	* igprof-analyse: Take short options. Output text, html and xml.

	* test/test_load.cc: Reduce loop counts, we now do real locking
	so programs run much slower.

	* IgProf.cc, IgProfPerf.cc: Wise up.  The pthreads locking stuff
	does not work with asynchronous signals.  So make each thread keep
	its own tree roots so the (performance) profiling module can add
	add entries to private tree without interlocking threads.  For
	locks go back to regular pthreads mutexes, the are required so
	that concurrent lock attempts (e.g. calls to malloc in several
	threads simultaneously) continue to work.

	* igprof-analyse: Sort parents and callers too.

	* igprof-analyse: Improve by-caller sorting.

	* IgProf.cc: Counters are now large numbers.

	* igprof-analyse: Optionally output libraries.  Sort by caller.

42004-05-15  Lassi A. Tuura  <lat@iki.fi>

	* IgProf.cc, IgProfFileDesc.cc, IgProfMem.cc, IgProfPerf.cc:
	Remove unnecessary semi-colons.

	* IgProf.h, IgProfMacros.h: Split macros off to another header.
	Provide easier interface to registering hooks, provide trampolines
	directly and support dual hooks for binaries that have symbols in
	themselves in addition to being defined in system libraries.
	Heavy work on multi-thread profiling issues.  Add documentation.
	Include program name and process-id into the dump if possible.
	* IgProfFileDesc.cc: New hook definition scheme.  Document.
	* IgProfMem.cc: New hook definition scheme.  Document.
	* IgProfPerf.cc: New hook definition scheme.  Document.
	Heavy work on multi-threaded program profiling.
	* test/test_load.cc: New multi-threaded stress test.
	* src/.gdbinit: New.

2004-05-14  Lassi A. Tuura  <lat@iki.fi>

	* IgProf.h: Restore old interface.

	* IgProfPerf.cc: Disable/enable timer and signal handler when
	the module is disabled/enabled.  Rearrange init sequence so
	we can call system pthread_create().

	* IgProf.cc: Remove messing with thread-specific data, it just
	creates problems -- it allocates memory and we are sometimes
	unable to capture all threads.  Just make sure the performance
	profiler doesn't call us from a signal handler.

	* IgProfPerf.cc: Pass valid memory to thread start routine.

	* IgProf.cc: Properly check if the program is multi-threaded and
	remember that in all decisions.  Mark program non-threaded when we
	are quitting to avoid invoking into pthreads in destructors
	(e.g. from late-delivered profile signal).  Try to work around
	bugs in linux recursive mutex handling within signals.
	* IgProf.h (IgProfLock): Update.

	* IgProfPerf.cc: Synchronise profiling signal thread startup.
	Correctly check whether profiling module is enabled.  Make sure
	profiling signal is not sent before we are ready for it in
	captured threads (may still not work correctly -- sometimes COBRA
	seems to catch SIGSEGV the minute we capture the thread?).

	* IgProfMem.cc (add): Live counter is cumulative, not maxed.

	* IgProf.cc, IgProfMem.cc, IgProfFileDesc.cc: Trap all functions
	twice, once for main program and another time for executable, as
	we used to do for "exit()".  Required for some binaries.  To be
	cleaned up so a single macro does both variations.

	* IgProfFileDesc.cc (initialize): Fix option handling.

	* IgProfFileDesc.cc: Implement.

2004-05-13  Lassi A. Tuura  <lat@iki.fi>

	* igprof-analyse: Normalise counters early.

	* IgProfMem.cc, IgProfPerf.cc, IgProfFileDesc.cc: Fix option
	parsing.

	* IgProf.cc (igkill): Lock only once we know we will handle this
	signal to avoid dead-locking problems (e.g. with SIGPROF).

2004-05-13  Lassi A. Tuura  <lat@iki.fi>

	* IgProf.h: Turn off verbosity for proper usage.

	* IgProf.h, IgProf.cc (IGPROF_ASSERT, IGPROF_TRACE, panic): New
	profiler tool debugging utilities.

	* IgProfFileDesc.cc, IgProfPerf.cc: Use them.

	* IgProfMem.cc: Use them.  Allow remove() to be called on
	objects whose creation we didn't track.

2004-05-12  Lassi A. Tuura  <lat@iki.fi>

	* igprof-analyse: Fix dump reading bugs.  Take into account key
	ordering options for output.

	* igprof-analyse: First complete version (except recursion).

	* IgProf.cc: Output counter counts.  Clean up output layout.

	* igprof, IgProfMem.cc: Counters now have counts as well as
	totals, no need for allocations counter any more.

	* igprof-analyse: First semi-functional version.

	* IgProfMem.cc, IgProfPerf.cc, IgProfFileDesc.cc: Remove
	cumulative counters, they are handled in the analyser.

2004-05-11  Lassi A. Tuura  <lat@iki.fi>

	* scripts/igprof, IgProf.cc, IgProfPerf.cc: Fixes for OS X.

2004-05-10  Lassi A. Tuura  <lat@iki.fi>

	* scripts/igprof-analyse: Preliminary analysis.

	* IgProfMem.cc, IgProfPerf.cc, IgProfFileDesc.cc (initialize):
	Make progress in the option string when unrecognised input is found.

	* scripts/igprof: Adapt to new profiler core.
	* scripts/igprof-analyse: New, analyse output files.

	* IgProf.h (IGPROF_LIBHOOK): New, for library-targeted hooks.
	* IgProf.cc: Use it to capture exit() from libc directly in
	non-dynamic programs such as "ls".
	* IgProfPerf.cc: Implement.
	* IgProfMem.cc: Remove unnecessary crud.

	* IgProf.h, IgProf.cc: Clean up internal static variable usage.
	Provide clean means to lock and unlock profiler core and activate
	or deactivate all enabled modules.  Use the facility in hooked
	functions.  Dump output in XML.  Dump symbol table separately
	from the trace.
	* IgProfFileDesc.cc: Use new profiler locking/activation scheme.
	* IgProfPerf.cc: Use new profiler locking/activation scheme.
	* IgProfMem.cc: Use new profiler locking/activation scheme.
	Automatically enable live counting if leak checking is turned on.

2004-05-07  Lassi A. Tuura  <lat@iki.fi>

	* IgProf.cc (dumpTrace): Dump node address so leaks can be matched.

	* Preliminary version rewritten using IgHook.

2004-04-16  Giulio Eulisse  <giulio.eulisse@cern.ch>

	* IgSProfTimerHooks.cc, IgSProfPThreadCreateHooks.cc: using thread
	as argument name in place of __thread as the latter is a keyword
	with more recent versions of glibc.
	Fixed the __THROW statement in pthread_join () as the prototype
	has changed in more recent versions of glibc.

2004-03-15  Giulio Eulisse  <giulio.eulisse@cern.ch>

	* IgSProfTimerHooks.cc: more robust support for multithreading.

	* IgSProfPThreadCreateHooks.cc: added magic code for
	wrapping pthread_create and several other pthread related
	functions in order to intercept the creation of a new thread.

	* IgMProfSymbolFilter.cc (IgMProfSymbolFilter): beatification
	fixes.

2004-02-04  Giulio Eulisse  <giulio.eulisse@cern.ch>

	* test_forking.cc: test for pthreads profiling... 

	* IgSProfPThreadCreateHooks.cc: workaround to enable SIGPROF also
	for spawned threads... It shouldn't be necessary, but it looks
	like it is...

	* IgMProfTreeTextBrowser.cc (dump): "MemProfLib:" references in
	output substituted with "IgProf:".

	* IgSProfTimerHooks.cc (IGUANA_sprof_sigprof_hook): rebroadcasting
	signal to other threads to overcome linux strange behavior when
	using pthreads and signals.

2004-02-03  Giulio Eulisse  <giulio.eulisse@cern.ch>

	* test/BuildFile, test_forking.cc: added test for multithreading support.

	* IgMProfTreeTextBrowser.cc (dump): name is generated on dump() to
	avoid problems with multiple threads.
	(dumpFlatProfile): hopefully, nicer layout with big numbers...

	* IgSProfTimerHooks.cc: added multithread support.

2003-11-17  Giulio Eulisse  <giulio.eulisse@cern.ch>

	* IgMProfAllocation.h (struct IgMProfAllocation): this structure
	is used to keep track of the size of a live allocation and to
	which branch (by storing the end node of the branch) it belongs.

	* test_liveAllocations.cc: new test for live allocations.

	* test/BuildFile: new test for live allocations added.
	
	* IgSProfTimerHooks.cc (IGUANA_sprof_sigprof_hook): now it
	uses the new addCurrentStacktrace API.

	* IgMProfTreeTextBrowser.cc: now supports the use of
	IgMProfTreeRep to keep track of leaks. New filenames:
	memoryPID.flat for the memory profiler, leaksPID.flat for the leak
	report and performancePID.flat for the performance
	profiler. Cosmetic fixes.

	* IgMProfTreeRep.cc, IgMProfTreeRep.h: now the tree can keep track
	of the information about max live heap size. When a new allocation
	is performed, the current allocated memory (in m_count) is
	compared with the maximum found in m_maxCount. If it is bigger,
	m_maxCount is upgraded to the new value. Moreover each live
	allocation is tracked in m_endNodeMap. When a free () occurs, the
	pointer to the branch relative at such an allocation is searched
	in such a map and the branch is walked backward removing the
	amount of memory freed from m_count.

	* IgMProfTreeLeaf.h (IgMProfTreeLeaf): new structure to allow to
	keep the information about max live heap size. Also it now has an
	m_parent field which olds the pointer to the parent node in the
	tree.

	* IgMProfMallocHooks.cc: now passing also the allocated memory
	address to addCurrentStacktrace, as it is needed for max live heap
	size tracking. Removing old leak checking code. Cosmetic fixes.

	* IgMProfConfiguration.h (IgMProfConfiguration): new totalsum
	parameter which makes the profiler keep track of the total
	allocation performed by a function, rather than the max live heap
	size for that function.

	* IgMProfBootstrap.cc, IgMProfBootstrap.h: cosmetic fixes. Now
	the leak information is kept in the same tree structure of the
	memory profiler, so that IgMProfLinearSingleton (the linear
	structure used for the leaks) is not necessary anymore. Renamed
	the output file names to a better layout. 

	* scripts/igprof: new --total-sum (or -ts) option to obtain the
	cumulative allocation size performed by a function. By default the
	output is now the max live heap size per function.

2003-11-10  Giulio Eulisse  <giulio.eulisse@cern.ch>

	* test/test_overriddenNew.cc (main): removed unused arguments from
	main.

2003-10-07  Giulio Eulisse  <giulio.eulisse@cern.ch>

	* (all files): renamed Ig_Imports/MemProfLib to Ig_Tools/IgProf.
	MEM_PROF_LIB changed to IG_PROF.

	* (all files): copied as is from IGUANA Ig_Imports/MemProfLib
	
	* BuildFile: moved from Ig_Tools/IgProf/src to Ig_Tools/IgProf.

