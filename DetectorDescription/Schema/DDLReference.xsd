<?xml version = "1.0" encoding = "UTF-8"?>
<!--Generated by XML Authority. Conforms to w3c http://www.w3.org/2001/XMLSchema-->
<xsd:schema xmlns = "http://www.cern.ch/cms/DDL"
	 targetNamespace = "http://www.cern.ch/cms/DDL"
	 xmlns:xsd = "http://www.w3.org/2001/XMLSchema"
	 elementFormDefault = "unqualified">
	<xsd:annotation>
		<xsd:documentation xml:lang = "en">
		This schema describes references between data. 5 types of references have been identified. These point respectively to: Solids, Material, Rotation, LogicalPart and Parameter. I would have been possible to use Xlink/xpointer or key/keyrefs. But xlink is a very verbose way of describing links, and key/keyrefs are only defined on one file. The references also have an optional "url" attribute that points to the file, where the reference is pointing to an element. The rLogicalPart has an extra optional attribute "parent" that describes the parent.
	
		</xsd:documentation>
		<xsd:documentation xml:lang = "en"> 
		The format of the string path will be based on the following grammar in order to locate parts in the exploded/compact view It is based on Xpath, but simpeler. This means it is easy to parse and to understand for physicists. In the exploded view you identify parts by there label (only physicalparts), their name (in a logical part) and their copy number (in case of parameterizations) 


 PATH           == (ELEMENT)*    
 ELEMENT        == PhysicalPartID | LogicalPartID | NavElement
 LogicPartID    == //string  
 PhysicalPartID == PosPartLabel (copynumber)^(0,1) 
 NavElement     == "*" | ".."
 PosPartLabel   == /string 
 copynumber     == [ integer (, integer)* ]  

 the string can contain the wild character *. e.g. "tk*r" all strings starting with tk and ending on r. "*" and ".." represent "the following part in the path no matter how deep in the tree" and "go to parent" respectively.
 
		</xsd:documentation>
	</xsd:annotation>
	<xsd:attributeGroup name = "rLogicalPartAttributes">
		<xsd:attribute name = "parent" use = "optional" type = "xsd:boolean"/>
	</xsd:attributeGroup>
	<xsd:attributeGroup name = "ReferenceAttributes">
		<xsd:attribute name = "name" use = "required" type = "xsd:string"/>
		<xsd:attribute name = "url" use = "optional" type = "xsd:anyURI"/>
	</xsd:attributeGroup>
	<xsd:attributeGroup name = "PartSelectorAttributes">
		<xsd:attribute name = "path" use = "required" type = "xsd:string"/>
		<xsd:attribute name = "subtrees" use = "optional" type = "xsd:boolean"/>
	</xsd:attributeGroup>
	
	<!-- Elements -->
	
	<xsd:element name = "rSolid" type = "ReferenceType"/>
	<xsd:element name = "rMaterial" type = "ReferenceType"/>
	<xsd:element name = "rRotation" type = "ReferenceType"/>
	<xsd:element name = "rReflectionRotation" type = "ReferenceType"/>
	<xsd:element name = "rLogicalPart" type = "rLogicalPartType"/>
	<xsd:element name = "rParameter" type = "ReferenceType"/>
	<xsd:element name = "PartSelector" type = "PartSelectorType"/>
	
	<!-- Types -->
	
	<xsd:complexType name = "ReferenceType">
		<xsd:attributeGroup ref = "ReferenceAttributes"/>
	</xsd:complexType>
	<xsd:complexType name = "rLogicalPartType">
		<xsd:complexContent>
			<xsd:extension base = "ReferenceType">
				<xsd:sequence>
					<xsd:element name = "comment" type = "xsd:string" minOccurs = "0"/>
				</xsd:sequence>
				<xsd:attributeGroup ref = "rLogicalPartAttributes"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name = "PartSelectorType">
		<xsd:attributeGroup ref = "PartSelectorAttributes"/>
	</xsd:complexType>
	
	<!-- Attributes -->
	
	
	<!-- default value of subtrees is false -->
	
	
	<!-- Terminal symbols: //, string, /, [ , integer, ] -->
	
</xsd:schema>